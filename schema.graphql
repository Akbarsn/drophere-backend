scalar Time

type StorageProvider {
  id: Int!
  providerId: Int!
  email: String!
  photo: String!
}

type User {
  id: Int!
  email: String!
  name: String!
  dropboxAuthorized: Boolean!
  dropboxEmail: String
  dropboxAvatar: String
  connectedStorageProviders: [StorageProvider!]!
}
type Token {
  loginToken: String!
  #expiry: Time
}
type Link {
  id: Int!
  title: String!
  isProtected: Boolean!
  slug: String
  description: String
  deadline: Time
  storageProvider: StorageProvider
  ## storageProvider is null if the link is not connected to any storage provider
}
type Message {
  message: String!
}

# the schema allows the following query:
type Query {
  ## TODO: change links type below to [Link!]!
  links: [Link]
  me: User
  link(slug: String!): Link 
}
type Mutation {
  # Register new user
  register(email: String!, password: String!, name: String!): Token
  login(email: String!, password: String!): Token
  requestPasswordRecovery(email: String!): Message
  recoverPassword(email: String!, recoverToken: String!, newPassword: String!): Token
  updatePassword(oldPassword: String!, newPassword: String!): Message
  updateProfile(newName: String!): Message
  connectStorageProvider(providerId: Int!, providerToken: String!): Message
  disconnectStorageProvider(providerId: Int!): Message
  createLink(title:  String!,slug: String!, description: String, deadline: Time, password: String): Link
  updateLink(linkId: Int!, title:  String!, slug: String!, description: String, deadline: Time, password: String): Message
  deleteLink(linkId: Int!): Message
  checkLinkPassword(linkId: Int!, password: String!): Message
}

